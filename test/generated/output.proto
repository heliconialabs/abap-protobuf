syntax = "proto2";
message KeyValue {
  required string key = 1;
  required string value = 2;
}
message Schema {
  enum Type {
    None = 0;
    String = 1;
    Json = 2;
    Protobuf = 3;
    Avro = 4;
    Bool = 5;
    Int8 = 6;
    Int16 = 7;
    Int32 = 8;
    Int64 = 9;
    Float = 10;
    Double = 11;
    Date = 12;
    Time = 13;
    Timestamp = 14;
    KeyValue = 15;
    Instant = 16;
    LocalDate = 17;
    LocalTime = 18;
    LocalDateTime = 19;
    ProtobufNative = 20;
    AutoConsume = 21;
  }
  required string name = 1;
  required bytes schema_data = 3;
  required Type type = 4;
  repeated KeyValue properties = 5;
}
message MessageIdData {
  required uint64 ledgerId = 1;
  required uint64 entryId = 2;
  optional int32 partition = 3 [default = -1];
  optional int32 batch_index = 4 [default = -1];
  repeated int64 ack_set = 5;
  optional int32 batch_size = 6;
}
message KeyLongValue {
  required string key = 1;
  required uint64 value = 2;
}
message IntRange {
  required int32 start = 1;
  required int32 end = 2;
}
message EncryptionKeys {
  required string key = 1;
  required bytes value = 2;
  repeated KeyValue metadata = 3;
}
enum CompressionType {
  NONE = 0;
  LZ4 = 1;
  ZLIB = 2;
  ZSTD = 3;
  SNAPPY = 4;
}
enum ProducerAccessMode {
  Shared = 0;
  Exclusive = 1;
  WaitForExclusive = 2;
  ExclusiveWithFencing = 3;
}
message MessageMetadata {
  required string producer_name = 1;
  required uint64 sequence_id = 2;
  required uint64 publish_time = 3;
  repeated KeyValue properties = 4;
  optional string replicated_from = 5;
  optional string partition_key = 6;
  repeated string replicate_to = 7;
  optional CompressionType compression = 8 [default = NONE];
  optional uint32 uncompressed_size = 9 [default = 0];
  optional int32 num_messages_in_batch = 11 [default = 1];
  optional uint64 event_time = 12 [default = 0];
  repeated EncryptionKeys encryption_keys = 13;
  optional string encryption_algo = 14;
  optional bytes encryption_param = 15;
  optional bytes schema_version = 16;
  optional bool partition_key_b64_encoded = 17 [ default = false ];
  optional bytes ordering_key = 18;
  optional int64 deliver_at_time = 19;
  optional int32 marker_type = 20;
  optional uint64 txnid_least_bits = 22;
  optional uint64 txnid_most_bits = 23;
  optional uint64 highest_sequence_id = 24 [default = 0];
  optional bool null_value = 25 [default = false];
  optional string uuid = 26;
  optional int32 num_chunks_from_msg = 27;
  optional int32 total_chunk_msg_size = 28;
  optional int32 chunk_id = 29;
  optional bool null_partition_key = 30 [default = false];
}
message SingleMessageMetadata {
  repeated KeyValue properties = 1;
  optional string partition_key = 2;
  required int32 payload_size = 3;
  optional bool compacted_out = 4 [default = false];
  optional uint64 event_time = 5 [default = 0];
  optional bool partition_key_b64_encoded = 6 [ default = false ];
  optional bytes ordering_key = 7;
  optional uint64 sequence_id = 8;
  optional bool null_value = 9 [ default = false ];
  optional bool null_partition_key = 10 [ default = false];
}
message BrokerEntryMetadata {
  optional uint64 broker_timestamp = 1;
  optional uint64 index = 2;
}
enum ServerError {
  UnknownError = 0;
  MetadataError = 1;
  PersistenceError = 2;
  AuthenticationError = 3;
  AuthorizationError = 4;
  ConsumerBusy = 5;
  ServiceNotReady = 6;
  ProducerBlockedQuotaExceededError = 7;
  ProducerBlockedQuotaExceededException = 8;
  ChecksumError = 9;
  UnsupportedVersionError = 10;
  TopicNotFound = 11;
  SubscriptionNotFound = 12;
  ConsumerNotFound = 13;
  TooManyRequests = 14;
  TopicTerminatedError = 15;
  ProducerBusy = 16;
  InvalidTopicName = 17;
  IncompatibleSchema = 18;
  ConsumerAssignError = 19;
  TransactionCoordinatorNotFound = 20;
  InvalidTxnStatus = 21;
  NotAllowedError = 22;
  TransactionConflict = 23;
  TransactionNotFound = 24;
  ProducerFenced = 25;
}
enum AuthMethod {
  AuthMethodNone = 0;
  AuthMethodYcaV1 = 1;
  AuthMethodAthens = 2;
}
enum ProtocolVersion {
  v0 = 0;
  v1 = 1;
  v2 = 2;
  v3 = 3;
  v4 = 4;
  v5 = 5;
  v6 = 6;
  v7 = 7;
  v8 = 8;
  v9 = 9;
  v10 = 10;
  v11 = 11;
  v12 = 12;
  v13 = 13;
  v14 = 14;
  v15 = 15;
  v16 = 16;
  v17 = 17;
  v18 = 18;
  v19 = 19;
  v20 = 20;
  v21 = 21;
}
message FeatureFlags {
  optional bool supports_auth_refresh = 1 [default = false];
  optional bool supports_broker_entry_metadata = 2 [default = false];
  optional bool supports_partial_producer = 3 [default = false];
  optional bool supports_topic_watchers = 4 [default = false];
}
message CommandConnect {
  required string client_version = 1;
  optional AuthMethod auth_method = 2;
  optional string auth_method_name = 5;
  optional bytes auth_data = 3;
  optional int32 protocol_version = 4 [default = 0];
  optional string proxy_to_broker_url = 6;
  optional string original_principal = 7;
  optional string original_auth_data = 8;
  optional string original_auth_method = 9;
  optional FeatureFlags feature_flags = 10;
  optional string proxy_version = 11;
}
message CommandConnected {
  required string server_version = 1;
  optional int32 protocol_version = 2 [default = 0];
  optional int32 max_message_size = 3;
  optional FeatureFlags feature_flags = 4;
}
message AuthData {
  optional string auth_method_name = 1;
  optional bytes auth_data = 2;
}
message CommandAuthResponse {
  optional string client_version = 1;
  optional AuthData response = 2;
  optional int32 protocol_version = 3 [default = 0];
}
message CommandAuthChallenge {
  optional string server_version = 1;
  optional AuthData challenge = 2;
  optional int32 protocol_version = 3 [default = 0];
}
enum KeySharedMode {
  AUTO_SPLIT = 0;
  STICKY = 1;
}
message KeySharedMeta {
  required KeySharedMode keySharedMode = 1;
  repeated IntRange hashRanges = 3;
  optional bool allowOutOfOrderDelivery = 4 [default = false];
}
message CommandSubscribe {
  enum SubType {
    Exclusive = 0;
    Shared = 1;
    Failover = 2;
    Key_Shared = 3;
  }
  required string topic = 1;
  required string subscription = 2;
  required SubType subType = 3;
  required uint64 consumer_id = 4;
  required uint64 request_id = 5;
  optional string consumer_name = 6;
  optional int32 priority_level = 7;
  optional bool durable = 8 [default = true];
  optional MessageIdData start_message_id = 9;
  repeated KeyValue metadata = 10;
  optional bool read_compacted = 11;
  optional Schema schema = 12;
  enum InitialPosition {
    Latest = 0;
    Earliest = 1;
  }
  optional InitialPosition initialPosition = 13 [default = Latest];
  optional bool replicate_subscription_state = 14;
  optional bool force_topic_creation = 15 [default = true];
  optional uint64 start_message_rollback_duration_sec = 16 [default = 0];
  optional KeySharedMeta keySharedMeta = 17;
  repeated KeyValue subscription_properties = 18;
  optional uint64 consumer_epoch = 19;
}
message CommandPartitionedTopicMetadata {
  required string topic = 1;
  required uint64 request_id = 2;
  optional string original_principal = 3;
  optional string original_auth_data = 4;
  optional string original_auth_method = 5;
}
message CommandPartitionedTopicMetadataResponse {
  enum CLookupType {
    Success = 0;
    Failed = 1;
  }
  optional uint32 partitions = 1;
  required uint64 request_id = 2;
  optional CLookupType response = 3;
  optional ServerError error = 4;
  optional string message = 5;
}
message CommandLookupTopic {
  required string topic = 1;
  required uint64 request_id = 2;
  optional bool authoritative = 3 [default = false];
  optional string original_principal = 4;
  optional string original_auth_data = 5;
  optional string original_auth_method = 6;
  optional string advertised_listener_name = 7;
}
message CommandLookupTopicResponse {
  enum LookupType {
    Redirect = 0;
    Connect = 1;
    Failed = 2;
  }
  optional string brokerServiceUrl = 1;
  optional string brokerServiceUrlTls = 2;
  optional LookupType response = 3;
  required uint64 request_id = 4;
  optional bool authoritative = 5 [default = false];
  optional ServerError error = 6;
  optional string message = 7;
  optional bool proxy_through_service_url = 8 [default = false];
}
message CommandProducer {
  required string topic = 1;
  required uint64 producer_id = 2;
  required uint64 request_id = 3;
  optional string producer_name = 4;
  optional bool encrypted = 5 [default = false];
  repeated KeyValue metadata = 6;
  optional Schema schema = 7;
  optional uint64 epoch = 8 [default = 0];
  optional bool user_provided_producer_name = 9 [default = true];
  optional ProducerAccessMode producer_access_mode = 10 [default = Shared];
  optional uint64 topic_epoch = 11;
  optional bool txn_enabled = 12 [default = false];
  optional string initial_subscription_name = 13;
}
message CommandSend {
  required uint64 producer_id = 1;
  required uint64 sequence_id = 2;
  optional int32 num_messages = 3 [default = 1];
  optional uint64 txnid_least_bits = 4 [default = 0];
  optional uint64 txnid_most_bits = 5 [default = 0];
  optional uint64 highest_sequence_id = 6 [default = 0];
  optional bool is_chunk = 7 [default = false];
  optional bool marker = 8 [default = false];
  optional MessageIdData message_id = 9;
}
message CommandSendReceipt {
  required uint64 producer_id = 1;
  required uint64 sequence_id = 2;
  optional MessageIdData message_id = 3;
  optional uint64 highest_sequence_id = 4 [default = 0];
}
message CommandSendError {
  required uint64 producer_id = 1;
  required uint64 sequence_id = 2;
  required ServerError error = 3;
  required string message = 4;
}
message CommandMessage {
  required uint64 consumer_id = 1;
  required MessageIdData message_id = 2;
  optional uint32 redelivery_count = 3 [default = 0];
  repeated int64 ack_set = 4;
  optional uint64 consumer_epoch = 5;
}
message CommandAck {
  enum AckType {
    Individual = 0;
    Cumulative = 1;
  }
  required uint64 consumer_id = 1;
  required AckType ack_type = 2;
  repeated MessageIdData message_id = 3;
  enum ValidationError {
    UncompressedSizeCorruption = 0;
    DecompressionError = 1;
    ChecksumMismatch = 2;
    BatchDeSerializeError = 3;
    DecryptionError = 4;
  }
  optional ValidationError validation_error = 4;
  repeated KeyLongValue properties = 5;
  optional uint64 txnid_least_bits = 6 [default = 0];
  optional uint64 txnid_most_bits = 7 [default = 0];
  optional uint64 request_id = 8;
}
message CommandAckResponse {
  required uint64 consumer_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
  optional uint64 request_id = 6;
}
message CommandActiveConsumerChange {
  required uint64 consumer_id = 1;
  optional bool is_active = 2 [default = false];
}
message CommandFlow {
  required uint64 consumer_id = 1;
  required uint32 messagePermits = 2;
}
message CommandUnsubscribe {
  required uint64 consumer_id = 1;
  required uint64 request_id = 2;
}
message CommandSeek {
  required uint64 consumer_id = 1;
  required uint64 request_id = 2;
  optional MessageIdData message_id = 3;
  optional uint64 message_publish_time = 4;
}
message CommandReachedEndOfTopic {
  required uint64 consumer_id = 1;
}
message CommandTopicMigrated {
  enum ResourceType {
    Producer = 0;
    Consumer = 1;
  }
  required uint64 resource_id = 1;
  required ResourceType resource_type = 2;
  optional string brokerServiceUrl = 3;
  optional string brokerServiceUrlTls = 4;
}
message CommandCloseProducer {
  required uint64 producer_id = 1;
  required uint64 request_id = 2;
}
message CommandCloseConsumer {
  required uint64 consumer_id = 1;
  required uint64 request_id = 2;
}
message CommandRedeliverUnacknowledgedMessages {
  required uint64 consumer_id = 1;
  repeated MessageIdData message_ids = 2;
  optional uint64 consumer_epoch = 3;
}
message CommandSuccess {
  required uint64 request_id = 1;
  optional Schema schema = 2;
}
message CommandProducerSuccess {
  required uint64 request_id = 1;
  required string producer_name = 2;
  optional int64 last_sequence_id = 3 [default = -1];
  optional bytes schema_version = 4;
  optional uint64 topic_epoch = 5;
  optional bool producer_ready = 6 [default = true];
}
message CommandError {
  required uint64 request_id = 1;
  required ServerError error = 2;
  required string message = 3;
}
message CommandPing {
}
message CommandPong {
}
message CommandConsumerStats {
  required uint64 request_id = 1;
  required uint64 consumer_id = 4;
}
message CommandConsumerStatsResponse {
  required uint64 request_id = 1;
  optional ServerError error_code = 2;
  optional string error_message = 3;
  optional double msgRateOut = 4;
  optional double msgThroughputOut = 5;
  optional double msgRateRedeliver = 6;
  optional string consumerName = 7;
  optional uint64 availablePermits = 8;
  optional uint64 unackedMessages = 9;
  optional bool blockedConsumerOnUnackedMsgs = 10;
  optional string address = 11;
  optional string connectedSince = 12;
  optional string type = 13;
  optional double msgRateExpired = 14;
  optional uint64 msgBacklog = 15;
  optional double messageAckRate = 16;
}
message CommandGetLastMessageId {
  required uint64 consumer_id = 1;
  required uint64 request_id = 2;
}
message CommandGetLastMessageIdResponse {
  required MessageIdData last_message_id = 1;
  required uint64 request_id = 2;
  optional MessageIdData consumer_mark_delete_position = 3;
}
message CommandGetTopicsOfNamespace {
  enum Mode {
    PERSISTENT = 0;
    NON_PERSISTENT = 1;
    ALL = 2;
  }
  required uint64 request_id = 1;
  required string namespace = 2;
  optional Mode mode = 3 [default = PERSISTENT];
  optional string topics_pattern = 4;
  optional string topics_hash = 5;
}
message CommandGetTopicsOfNamespaceResponse {
  required uint64 request_id = 1;
  repeated string topics = 2;
  optional bool filtered = 3 [default = false];
  optional string topics_hash = 4;
  optional bool changed = 5 [default = true];
}
message CommandWatchTopicList {
  required uint64 request_id = 1;
  required uint64 watcher_id = 2;
  required string namespace = 3;
  required string topics_pattern = 4;
  optional string topics_hash = 5;
}
message CommandWatchTopicListSuccess {
  required uint64 request_id = 1;
  required uint64 watcher_id = 2;
  repeated string topic = 3;
  required string topics_hash = 4;
}
message CommandWatchTopicUpdate {
  required uint64 watcher_id = 1;
  repeated string new_topics = 2;
  repeated string deleted_topics = 3;
  required string topics_hash = 4;
}
message CommandWatchTopicListClose {
  required uint64 request_id = 1;
  required uint64 watcher_id = 2;
}
message CommandGetSchema {
  required uint64 request_id = 1;
  required string topic = 2;
  optional bytes schema_version = 3;
}
message CommandGetSchemaResponse {
  required uint64 request_id = 1;
  optional ServerError error_code = 2;
  optional string error_message = 3;
  optional Schema schema = 4;
  optional bytes schema_version = 5;
}
message CommandGetOrCreateSchema {
  required uint64 request_id = 1;
  required string topic = 2;
  required Schema schema = 3;
}
message CommandGetOrCreateSchemaResponse {
  required uint64 request_id = 1;
  optional ServerError error_code = 2;
  optional string error_message = 3;
  optional bytes schema_version = 4;
}
enum TxnAction {
  COMMIT = 0;
  ABORT = 1;
}
message CommandTcClientConnectRequest {
  required uint64 request_id = 1;
  required uint64 tc_id = 2 [default = 0];
}
message CommandTcClientConnectResponse {
  required uint64 request_id = 1;
  optional ServerError error = 2;
  optional string message = 3;
}
message CommandNewTxn {
  required uint64 request_id = 1;
  optional uint64 txn_ttl_seconds = 2 [default = 0];
  optional uint64 tc_id = 3 [default = 0];
}
message CommandNewTxnResponse {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
}
message CommandAddPartitionToTxn {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  repeated string partitions = 4;
}
message CommandAddPartitionToTxnResponse {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
}
message Subscription {
  required string topic = 1;
  required string subscription = 2;
}
message CommandAddSubscriptionToTxn {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  repeated Subscription subscription = 4;
}
message CommandAddSubscriptionToTxnResponse {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
}
message CommandEndTxn {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional TxnAction txn_action = 4;
}
message CommandEndTxnResponse {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
}
message CommandEndTxnOnPartition {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional string topic = 4;
  optional TxnAction txn_action = 5;
  optional uint64 txnid_least_bits_of_low_watermark = 6;
}
message CommandEndTxnOnPartitionResponse {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
}
message CommandEndTxnOnSubscription {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional Subscription subscription = 4;
  optional TxnAction txn_action = 5;
  optional uint64 txnid_least_bits_of_low_watermark = 6;
}
message CommandEndTxnOnSubscriptionResponse {
  required uint64 request_id = 1;
  optional uint64 txnid_least_bits = 2 [default = 0];
  optional uint64 txnid_most_bits = 3 [default = 0];
  optional ServerError error = 4;
  optional string message = 5;
}
message BaseCommand {
  enum BaseCommandType {
    CONNECT = 2;
    CONNECTED = 3;
    SUBSCRIBE = 4;
    PRODUCER = 5;
    SEND = 6;
    SEND_RECEIPT = 7;
    SEND_ERROR = 8;
    MESSAGE = 9;
    ACK = 10;
    FLOW = 11;
    UNSUBSCRIBE = 12;
    SUCCESS = 13;
    ERROR = 14;
    CLOSE_PRODUCER = 15;
    CLOSE_CONSUMER = 16;
    PRODUCER_SUCCESS = 17;
    PING = 18;
    PONG = 19;
    REDELIVER_UNACKNOWLEDGED_MESSAGES = 20;
    PARTITIONED_METADATA = 21;
    PARTITIONED_METADATA_RESPONSE = 22;
    LOOKUP = 23;
    LOOKUP_RESPONSE = 24;
    CONSUMER_STATS = 25;
    CONSUMER_STATS_RESPONSE = 26;
    REACHED_END_OF_TOPIC = 27;
    SEEK = 28;
    GET_LAST_MESSAGE_ID = 29;
    GET_LAST_MESSAGE_ID_RESPONSE = 30;
    ACTIVE_CONSUMER_CHANGE = 31;
    GET_TOPICS_OF_NAMESPACE = 32;
    GET_TOPICS_OF_NAMESPACE_RESPONSE = 33;
    GET_SCHEMA = 34;
    GET_SCHEMA_RESPONSE = 35;
    AUTH_CHALLENGE = 36;
    AUTH_RESPONSE = 37;
    ACK_RESPONSE = 38;
    GET_OR_CREATE_SCHEMA = 39;
    GET_OR_CREATE_SCHEMA_RESPONSE = 40;
    NEW_TXN = 50;
    NEW_TXN_RESPONSE = 51;
    ADD_PARTITION_TO_TXN = 52;
    ADD_PARTITION_TO_TXN_RESPONSE = 53;
    ADD_SUBSCRIPTION_TO_TXN = 54;
    ADD_SUBSCRIPTION_TO_TXN_RESPONSE = 55;
    END_TXN = 56;
    END_TXN_RESPONSE = 57;
    END_TXN_ON_PARTITION = 58;
    END_TXN_ON_PARTITION_RESPONSE = 59;
    END_TXN_ON_SUBSCRIPTION = 60;
    END_TXN_ON_SUBSCRIPTION_RESPONSE = 61;
    TC_CLIENT_CONNECT_REQUEST = 62;
    TC_CLIENT_CONNECT_RESPONSE = 63;
    WATCH_TOPIC_LIST = 64;
    WATCH_TOPIC_LIST_SUCCESS = 65;
    WATCH_TOPIC_UPDATE = 66;
    WATCH_TOPIC_LIST_CLOSE = 67;
    TOPIC_MIGRATED = 68;
  }
  required BaseCommandType type = 1;
  optional CommandConnect connect = 2;
  optional CommandConnected connected = 3;
  optional CommandSubscribe subscribe = 4;
  optional CommandProducer producer = 5;
  optional CommandSend send = 6;
  optional CommandSendReceipt send_receipt = 7;
  optional CommandSendError send_error = 8;
  optional CommandMessage message = 9;
  optional CommandAck ack = 10;
  optional CommandFlow flow = 11;
  optional CommandUnsubscribe unsubscribe = 12;
  optional CommandSuccess success = 13;
  optional CommandError error = 14;
  optional CommandCloseProducer close_producer = 15;
  optional CommandCloseConsumer close_consumer = 16;
  optional CommandProducerSuccess producer_success = 17;
  optional CommandPing ping = 18;
  optional CommandPong pong = 19;
  optional CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages = 20;
  optional CommandPartitionedTopicMetadata partitionMetadata = 21;
  optional CommandPartitionedTopicMetadataResponse partitionMetadataResponse = 22;
  optional CommandLookupTopic lookupTopic = 23;
  optional CommandLookupTopicResponse lookupTopicResponse = 24;
  optional CommandConsumerStats consumerStats = 25;
  optional CommandConsumerStatsResponse consumerStatsResponse = 26;
  optional CommandReachedEndOfTopic reachedEndOfTopic = 27;
  optional CommandSeek seek = 28;
  optional CommandGetLastMessageId getLastMessageId = 29;
  optional CommandGetLastMessageIdResponse getLastMessageIdResponse = 30;
  optional CommandActiveConsumerChange active_consumer_change = 31;
  optional CommandGetTopicsOfNamespace getTopicsOfNamespace = 32;
  optional CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse = 33;
  optional CommandGetSchema getSchema = 34;
  optional CommandGetSchemaResponse getSchemaResponse = 35;
  optional CommandAuthChallenge authChallenge = 36;
  optional CommandAuthResponse authResponse = 37;
  optional CommandAckResponse ackResponse = 38;
  optional CommandGetOrCreateSchema getOrCreateSchema = 39;
  optional CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse = 40;
  optional CommandNewTxn newTxn = 50;
  optional CommandNewTxnResponse newTxnResponse = 51;
  optional CommandAddPartitionToTxn addPartitionToTxn = 52;
  optional CommandAddPartitionToTxnResponse addPartitionToTxnResponse = 53;
  optional CommandAddSubscriptionToTxn addSubscriptionToTxn = 54;
  optional CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse = 55;
  optional CommandEndTxn endTxn = 56;
  optional CommandEndTxnResponse endTxnResponse = 57;
  optional CommandEndTxnOnPartition endTxnOnPartition = 58;
  optional CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse = 59;
  optional CommandEndTxnOnSubscription endTxnOnSubscription = 60;
  optional CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse = 61;
  optional CommandTcClientConnectRequest tcClientConnectRequest = 62;
  optional CommandTcClientConnectResponse tcClientConnectResponse = 63;
  optional CommandWatchTopicList watchTopicList = 64;
  optional CommandWatchTopicListSuccess watchTopicListSuccess = 65;
  optional CommandWatchTopicUpdate watchTopicUpdate = 66;
  optional CommandWatchTopicListClose watchTopicListClose = 67;
  optional CommandTopicMigrated topicMigrated = 68;
}